
pragma solidity ^0.4.18;

import 'zeppelin-solidity/contracts/math/SafeMath.sol';
import 'zeppelin-solidity/contracts/token/MintableToken.sol';
import './CrowdsaleProperty.sol';
import './CappedProperty.sol';
import './WhitelistedProperty.sol';
import './Crowdsale.sol';


contract CrowdsaleFactory {
  using SafeMath for uint256;

  //address[] public crowdsales; //Alternative
  event CrowdsaleCreated(address _from, Crowdsale addr);
  event PropertyAdded(CrowdsaleProperty property);

  function createCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public returns (Crowdsale) {

    Crowdsale crowdsale = new Crowdsale(_startTime, _endTime, _rate, _wallet);

    //crowdsales.push(crowdsale); //Alternative
    CrowdsaleCreated(msg.sender, crowdsale);
    return crowdsale;
  }

  function createCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, uint256 _cap) public returns(Crowdsale) {
    require(_cap > 0);
    Crowdsale crowdsale = createCrowdsale(_startTime, _endTime, _rate, _wallet);
    CappedProperty capped = new CappedProperty(_cap);
    crowdsale.addProperty(capped);
    PropertyAdded(capped);
    return crowdsale;
  }

  function createCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, address[] _whitelist) public returns(Crowdsale) {
    require(_whitelist.length > 0);
    Crowdsale crowdsale = createCrowdsale(_startTime, _endTime, _rate, _wallet);
    WhitelistedProperty whitelisted = new WhitelistedProperty(_whitelist);
    crowdsale.addProperty(whitelisted);
    PropertyAdded(whitelisted);
    return crowdsale;
  }

  function createCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, uint256 _cap, address[] _whitelist) public   returns(Crowdsale) {
    require(_cap > 0);
    require(_whitelist.length > 0);
    Crowdsale crowdsale = createCrowdsale(_startTime, _endTime, _rate, _wallet);
    CappedProperty capped = new CappedProperty(_cap);
    crowdsale.addProperty(capped);
    PropertyAdded(capped);
    WhitelistedProperty whitelisted = new WhitelistedProperty(_whitelist);
    crowdsale.addProperty(whitelisted);
    PropertyAdded(whitelisted);
    return crowdsale;
  }



  /* Alternative
    function getCrowdsaleAddressAtIndex(uint i) constant returns(address c) {
    return crowdsales[i];
  }*/

}
